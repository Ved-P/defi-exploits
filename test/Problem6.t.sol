// SPDX-License-Identifier: MIT
pragma solidity ^0.8.24;

import {Test, console, stdError} from "forge-std/Test.sol";
import "forge-std/Vm.sol";

import {Auction, Bidder} from "../src/Problem6.sol";
import {Attacker} from "./Attacker6.sol";

contract AuctionTest is Test {
    Auction public auction;
    Attacker public attacker;
    Bidder public alice;

    function setUp() public {
        auction = new Auction();
        attacker = new Attacker();
        alice = new Bidder();

        deal(address(auction), 0 ether);
        deal(address(attacker), 1 ether);

        deal(address(alice), 1000 ether);
    }

    function test_attack() public {

        vm.startPrank(address(alice));
        auction.bid();
        vm.stopPrank();

        // console.log("balance of attacker (before)", address(attacker).balance);
        attacker.attack(auction, alice);
        // console.log("balance of attacker (after)", address(attacker).balance);

        assertEq(auction.buyer(), address(attacker), "Buyer is not attacker");
    }

}
