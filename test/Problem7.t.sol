// SPDX-License-Identifier: MIT
pragma solidity ^0.7.6;
pragma abicoder v2;

import {Test, console, stdError} from "forge-std/Test.sol";
import "forge-std/Vm.sol";

import {Locker} from "../src/Problem7.sol";
import {Attacker} from "./Attacker7.sol";

contract LockerTest is Test {
    Locker public locker;
    Attacker public attacker;

    function setUp() public {
        locker = new Locker();
        attacker = new Attacker();

        deal(address(locker), 1000 ether);
        deal(address(attacker), 10 ether);
    }

    function test_attack() public {

        // vm.startPrank(address(attacker));
        // console.log("balance of attacker (before)", address(attacker).balance);
        attacker.attack(locker);
        // console.log("balance of attacker (after)", address(attacker).balance);
        // console.log("start: ", locker.start());
        // console.log("end: ", locker.end());
        // console.log("dur: ", locker.duration());
        // vm.stopPrank();

        assertEq(address(attacker).balance, 1010 ether, "Attacker still needs to earn more");
        assertEq(address(locker).balance, 0, "Locker is not drained up yet");
    }

}
