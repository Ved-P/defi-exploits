// SPDX-License-Identifier: MIT
pragma solidity ^0.8.24;

import {Test, console} from "forge-std/Test.sol";
import "forge-std/Vm.sol";

import {EtherGame} from "../src/Problem2.sol";
import {Attacker} from "./Attacker2.sol";

contract EtherGameTest is Test {
    EtherGame public game;
    Attacker public attacker;

    address alice = address(0x10);

    function setUp() public {
        game = new EtherGame();
        attacker = new Attacker(game);

        deal(address(game), 0 ether);
        deal(address(attacker), 10 ether);
        deal(alice, 10 ether);

        // register alice
        vm.startPrank(alice);
        game.register();
        vm.stopPrank();
/*
        // register attacker
        vm.startPrank(address(attacker));
        attacker.register();
        vm.stopPrank();
        assertNotEq(game.player2(), address(attacker), "Attacker cannot register himself");
*/

        attacker.register();

        // alice makes the first move
        vm.startPrank(alice);
        game.deposit{value: 2 ether}();
        vm.stopPrank();

        // attack!
        attacker.attack();
    }

    function test_attack() public {
        attacker.claim();

        assertEq(address(game).balance, 0 ether);
        assertEq(address(attacker).balance, 12 ether);
        assertEq(address(alice).balance, 8 ether);
    }

}
