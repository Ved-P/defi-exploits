// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import {Test, console, stdError} from "forge-std/Test.sol";
import "forge-std/Vm.sol";

import {FlashLoanPool, RewardPool} from "../src/Problem8.sol";
import {Attacker} from "./Attacker8.sol";

contract RewardTest is Test {
    FlashLoanPool public flashloan;
    RewardPool public reward;
    Attacker public attacker;

    function setUp() public {
        flashloan = new FlashLoanPool();
        reward = new RewardPool();
        attacker = new Attacker(flashloan, reward);

        deal(address(flashloan), 1000000 ether);
        deal(address(reward), 1000 ether);
        deal(address(attacker), 0 ether);
    }

    function test_attack() public {

        // console.log("balance of attacker (before)", address(attacker).balance);
        attacker.attack();
        // console.log("balance of attacker (after)", address(attacker).balance);

        assertEq(address(attacker).balance, 1000 ether, "Need more balance for attacker");
        assertEq(address(reward).balance, 0 ether, "Reward pool still has balance");
    }

}
