// SPDX-License-Identifier: MIT
pragma solidity ^0.8.24;

contract EtherQueen {
    address public queen;
    uint256 public balance;

    mapping(address=>uint256) public balances_to_return;

    function claimThrone() external payable {
        require(msg.value > balance, "Need to pay more to become the queen");

        // I don't send back the balance right now
        // but leave it to a dedicated pool
        // and people can claim later
        balances_to_return[queen] += balance;

        balance = msg.value;
        queen = msg.sender;
    }

    function claimBalance() external payable {
        uint256 bal = balances_to_return[msg.sender];
        // payable(msg.sender).transfer(bal);
        (bool r, ) = msg.sender.call{value: bal}("");

        balances_to_return[msg.sender] = 0;
    }
}