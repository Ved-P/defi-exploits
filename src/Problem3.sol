// SPDX-License-Identifier: MIT
pragma solidity ^0.8.24;

contract Poll {

    mapping(address=>uint256) public balances;

    string[] public candidates = ["Alice", "Bob", "Charlie"];
    uint256[] public votes = [0, 0, 0];

    uint public t_start;
    uint public t_end;

    constructor() {
        t_start = block.timestamp;
        t_end = t_start + 1;
    }

    function deposit() public payable {
        require(msg.value >= 1 ether, "You need to deposit at least 1 ether");
        balances[msg.sender] += msg.value;
    }
    
    function vote(uint256 choice) public payable {
        require(balances[msg.sender] > 0 ether, "You don't have enough balance to vote");
        require(block.timestamp < t_end, "Voting has ended");
        require(choice < 3, "Invalid vote");

        votes[choice] += balances[msg.sender]; // vote!
        // 0.01 ether: proof of successful vote
        (bool s, ) = msg.sender.call{value: 0.01 ether}("");
        require(s, "Failed to send token");

        balances[msg.sender] = 0;
    }

    function balance() public returns (uint256) {
        return balances[msg.sender];
    }

    function winner() public returns (uint) {
        require(block.timestamp >= t_end, "Voting has not ended!");
        // find winner
        uint max_i = 0;
        for (uint i = 0; i < 3; i++) {
            if (votes[i] > votes[max_i]) {
                max_i = i;
            }
        }
        return max_i;
    }

}